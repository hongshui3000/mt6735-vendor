/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2008
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/
/*****************************************************************************
 *
 * Filename:
 * ---------
 *   ccci_rpcd.h
 *
 * Project:
 * --------
 *   
 *
 * Description:
 * ------------
 *   
 *
 * Author:
 * -------
 *   
 *
 ****************************************************************************/

#ifndef __CCCI_RPCD_H__
#define __CCCI_RPCD_H__
#define STREAM_SUPPORT

#define CCCI_RPC_MAX_BUFFERS		(2)
#define RPC_API_RESP_ID			0xFFFF0000
#define RPC_PARAM_ERROR			-2
typedef enum{ false=0, true=1 } bool;


#ifndef STREAM_SUPPORT
#define RPC_MAX_BUF_SIZE		(2048)
#define RPC_MAX_ARG_NUM			6 /* parameter number */
#endif

typedef enum
{
	RPC_CCCI_TC1_FAC_READ_SIM_LOCK_TYPE = 0x3001,
	RPC_CCCI_TC1_FAC_READ_FUSG_FLAG,
	RPC_CCCI_TC1_FAC_CHECK_UNLOCK_CODE_VALIDNESS,
	RPC_CCCI_TC1_FAC_CHECK_NETWORK_CODE_VALIDNESS,
	RPC_CCCI_TC1_FAC_WRITE_SIM_LOCK_TYPE,
	RPC_CCCI_TC1_FAC_READ_IMEI,
	RPC_CCCI_TC1_FAC_WRITE_IMEI,
	RPC_CCCI_TC1_FAC_READ_NETWORK_CODE_LIST_NUM,
	RPC_CCCI_TC1_FAC_READ_NETWORK_CODE,
	//.............
	RPC_CCCI_TC1_FAC_WRITE_NETWORK_CODE_LIST_NUM,
	RPC_CCCI_TC1_FAC_WRITE_UNLOCK_CODE_VERIFY_FAIL_COUNT,
	RPC_CCCI_TC1_FAC_READ_UNLOCK_CODE_VERIFY_FAIL_COUNT,
	RPC_CCCI_TC1_FAC_WRITE_UNLOCK_FAIL_COUNT,
	RPC_CCCI_TC1_FAC_READ_UNLOCK_FAIL_COUNT,
	RPC_CCCI_TC1_FAC_WRITE_UNLOCK_CODE,
	RPC_CCCI_TC1_FAC_VERIFY_UNLOCK_CODE,
	RPC_CCCI_TC1_FAC_WRITE_NETWORK_CODE,
	RPC_CCCI_TC1_FAC_INIT_SIM_LOCK_DATA,
	
} RPC_CCCI_OP_ID;

typedef struct
{
	unsigned length;
	unsigned index;
}rpc_stream_msg_t;
  

typedef struct
{
	unsigned int rpc_ops_id;
#ifdef STREAM_SUPPORT
	unsigned char 	buffer[0];
#else
	unsigned char buffer[RPC_MAX_BUF_SIZE];
#endif
} rpc_stream_buffer_t;

typedef struct RPC_PACKET_INFO_STRUCT
{
	unsigned int 	Length;
	void		*pData;
} RPC_PACKET_INFO;

#ifdef STREAM_SUPPORT
typedef struct
{
		unsigned int data[2];
		unsigned int channel;
		unsigned int reserved;
} CCCI_BUFF_T;

typedef struct
{
		CCCI_BUFF_T header;
		rpc_stream_buffer_t payload;
}STREAM_DATA;

typedef enum {
    RPC_BUFF_IDLE = 0,   // current port is not waiting for more data
    RPC_BUFF_WAIT        // current port is waiting for more data to come in
} RPC_BUFF_STATUS;
#define RPC_REQ_BUFFER_MUN		5
#define RPC_BUFFER_SLOT_NUM 5
#define MAX_RPC_PKT_BYTE (3584-128)
#define MAX_RPC_BUF_BYTE 4096
#define CCCI_RPC_REQ_SEND_AGAIN 0x80000000
#define CCCI_RPC_PEER_REQ_SEND_AGAIN(_p) (((((CCCI_BUFF_T*)(_p))->data[0] & CCCI_RPC_REQ_SEND_AGAIN) != 0)? 1: 0)

#endif

typedef struct
{
#ifdef STREAM_SUPPORT
		void*					pRpcBuf;
    unsigned char       rpc_buff_state[RPC_BUFFER_SLOT_NUM];
    unsigned int        rpc_buff_offset[RPC_BUFFER_SLOT_NUM];
#else
		rpc_stream_buffer_t*					pRpcBuf;
#endif
		int							bNonAck;
}RPC_INFO;


#endif // __CCCI_RPC_H__
